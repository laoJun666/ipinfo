events {}

http {
    # 定义共享内存区域用于存储缓存数据
    lua_shared_dict ip_cache 10m;
    server {
        listen 80;

        location /ip {
            default_type application/json;
            charset utf-8;
            content_by_lua_block {
                local client_ip = ngx.var.remote_addr
                ngx.say('{"ip": "' .. client_ip .. '"}')
            }
        }

        location /ipinfo {
            resolver 8.8.8.8;

            default_type application/json;
            charset utf-8;

            content_by_lua_block {
                local http = require("resty.http")
                local client_ip = ngx.var.remote_addr
                local ipinfo_url = "http://ipinfo.io/" .. client_ip .. "/json"

                -- 设置超时时间（单位为秒）
                local timeout = 1

                -- 创建 HTTP 客户端实例
                local httpc = http.new()

                -- 检查缓存中是否存在结果
                local cache_key = "ip:" .. client_ip
                local cache_value = ngx.shared.ip_cache:get(cache_key)
                if cache_value then
                    ngx.say(cache_value)
                    return
                end

                -- 发送 HTTP 请求并设置超时
                local res, err = httpc:request_uri(ipinfo_url, {
                    method = "GET",
                    timeout = timeout
                })

                -- 检查是否出现错误
                if not res then
                    ngx.say('{"ip": "' .. client_ip .. '"}')
                    ngx.log(ngx.ERR, "failed to request: ", err)
                    return
                end

                -- 检查 HTTP 响应状态码
                if res.status ~= 200 then
                    ngx.say('{"ip": "' .. client_ip .. '"}')
                    ngx.log(ngx.ERR, "unexpected response status: ", res.status)
                    return
                end

                -- 返回 ipinfo.io 的响应
                ngx.say(res.body)

                -- 将结果存入缓存中，有效期设置为 60 秒
                ngx.shared.ip_cache:set(cache_key, res.body, 60)
            }
        }
    }
}
